services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - monitoring
      - mynetwork
    depends_on:
      - node-exporter
      - postgres-exporter

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    networks:
      - monitoring
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitoring

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://eugene:king5681@postgres:5432/test_messenger?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - monitoring
      - mynetwork
    depends_on:
      - postgres

  postgres:
    image: postgres:latest
    container_name: postgres
    environment: 
      POSTGRES_USER: eugene
      POSTGRES_PASSWORD: king5681
      POSTGRES_DB: test_messenger
    ports:
      - "5432:5432"
    networks:
      - mynetwork
      - monitoring
    volumes:
      - /home/eugene/testFullStack/db:/var/lib/postgresql/data

  backend:
    build: ./backend
    container_name: backend
    ports:
      - "4000:4000"
    environment: 
      DB_HOST: postgres
      DB_USER: eugene
      DB_PASS: king5681
      DB_NAME: test_messenger
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: fullstack-root-token
      # Увеличиваем таймаут для подключения к Vault
      VAULT_CLIENT_TIMEOUT: "10000"
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - mynetwork
    depends_on:
      vault:
        condition: service_healthy
      postgres:
        condition: service_started

  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "3000:3000"
    networks:
      - mynetwork
    depends_on:
      - postgres

  vault:
    image: hashicorp/vault
    container_name: vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=fullstack-root-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_API_ADDR=http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://0.0.0.0:8200/v1/sys/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - mynetwork

networks:
  monitoring:
    driver: bridge
  mynetwork:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
