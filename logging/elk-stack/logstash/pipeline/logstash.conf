input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5000
    codec => json_lines
  }
  
  udp {
    port => 5000
    codec => json_lines
  }
}

filter {
  # Парсинг логов мессенджера
  if [fields][service] == "messenger" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:level}\] %{GREEDYDATA:log_message}" }
    }
    
    date {
      match => [ "timestamp", "ISO8601" ]
    }
    
    # Добавляем метаданные
    mutate {
      add_field => { "service" => "messenger-api" }
      add_field => { "environment" => "development" }
    }
  }
  
  # Парсинг Docker логов
  if [container][name] {
    mutate {
      add_field => { "container_name" => "%{[container][name]}" }
    }
  }
  
  # Обогащение данных
  if [level] == "ERROR" or [level] == "error" {
    mutate {
      add_tag => [ "error" ]
      add_field => { "alert_level" => "high" }
    }
  }
  
  if [level] == "WARN" or [level] == "warn" {
    mutate {
      add_tag => [ "warning" ]
      add_field => { "alert_level" => "medium" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "messenger-logs-%{+YYYY.MM.dd}"
    template_name => "messenger-template"
    template_pattern => "messenger-logs-*"
    template => {
      "index_patterns" => ["messenger-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "level" => { "type" => "keyword" }
          "service" => { "type" => "keyword" }
          "environment" => { "type" => "keyword" }
          "container_name" => { "type" => "keyword" }
          "message" => { "type" => "text" }
          "log_message" => { "type" => "text" }
        }
      }
    }
  }
  
  # Дублируем в stdout для отладки
  stdout {
    codec => rubydebug
  }
}
